// Generated by CoffeeScript 2.5.0
var get_messages, get_terminal, redraw_terminal;

import {
  TileTypes
} from './enums.js';

import {
  State
} from './js_game_vars.js';

import {
  Position,
  Renderable,
  Dead,
  InBackpack,
  Equipped,
  Skip,
  Player,
  Cursor
} from './components.js';

// console is a reserved name in JS
redraw_terminal = function(position, inc_map, fov) {
  var comps, cur, cursor, ent, i, j, len, len1, player, pos, ref, ref1, terminal, visual;
  terminal = get_terminal(inc_map, fov);
  ref = State.world.get_components(Position, Renderable);
  // draw other entities
  for (i = 0, len = ref.length; i < len; i++) {
    [ent, comps] = ref[i];
    [pos, visual] = comps;
    //console.log visual + " x : " + pos.x + " y :" + pos.y

    // if not in fov
    if (fov[pos.x][pos.y] !== 1) {
      // skip
      continue;
    }
    // in backpack
    if (State.world.component_for_entity(ent, InBackpack)) {
      // skip
      continue;
    }
    if (State.world.component_for_entity(ent, Equipped)) {
      // skip
      continue;
    }
    // if dead
    if (State.world.component_for_entity(ent, Dead)) {
      // skip
      continue;
    }
    if (State.world.component_for_entity(ent, Skip)) {
      //skip
      continue;
    }
    // draw
    terminal[pos.x][pos.y] = [visual.char, visual.color, "normal"];
  }
  // draw player
  terminal[position.x][position.y] = ['@', [255, 255, 255], "normal"];
  // cursor
  cursor = null;
  ref1 = State.world.get_components(Player, Cursor);
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    [ent, comps] = ref1[j];
    [player, cur] = comps;
    cursor = cur;
  }
  if (cursor !== null) {
    terminal[cursor.x][cursor.y][2] = "cursor"; // change style to cursor 
  }
  return [terminal];
};

get_terminal = function(inc_map, fov) {
  var i, j, k, l, mapa, ref, ref1, x, x_max, y, y_max;
  //console.log("Terminal...")
  //console.log inc_map
  // dummy
  mapa = [];
  for (x = i = 0; i <= 21; x = ++i) {
    mapa.push([]);
    for (y = j = 0; j <= 21; y = ++j) {
      mapa[x].push(["&nbsp;", [255, 255, 255], "normal"]);
    }
  }
  //mapa = ((["&nbsp;", [255,255,255]] for num in [0..21]) for num in [0..21])

  // draw map
  x_max = inc_map.length - 1;
  y_max = inc_map[0].length - 1;
  for (x = k = 0, ref = x_max; (0 <= ref ? k <= ref : k >= ref); x = 0 <= ref ? ++k : --k) {
    for (y = l = 0, ref1 = y_max; (0 <= ref1 ? l <= ref1 : l >= ref1); y = 0 <= ref1 ? ++l : --l) {
      if (fov[x][y] === 1) { // visible
        //console.log TileTypes.data[inc_map[x][y]].map_str
        mapa[x][y] = [TileTypes.data[inc_map[x][y]].map_str, [255, 255, 255], "normal"];
      // debug
      } else if (State.explored[x][y] === 1) {
        mapa[x][y] = [TileTypes.data[inc_map[x][y]].map_str, [], "explored"];
      }
    }
  }
  //console.log(mapa)
  return mapa;
};

get_messages = function() {
  var drawn;
  drawn = null;
  if (State.messages.length < 5) {
    drawn = State.messages;
  } else {
    //slicing
    drawn = State.messages.slice(-5);
  }
  return drawn;
};

export {
  
  //get_terminal()
  get_terminal,
  redraw_terminal,
  get_messages
};
