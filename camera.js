// Generated by CoffeeScript 2.5.0
var Camera;

Camera = class Camera {
  constructor() {
    this.width = 10;
    this.height = 10;
    this.x = 0;
    this.y = 0;
    this.top_x = 0;
    this.top_y = 0;
    this.offset = [0, 0];
  }

  start_update() {
    var target_pos;
    target_pos = [1, 1];
    return this.offset = [target_pos[0] - this.x, target_pos[1] - this.y];
  }

  update(position) {
    // this calculates cells
    this.x = position.x;
    this.y = position.y;
    this.top_x = this.x - this.width / 2;
    return this.top_y = this.y - this.height / 2;
  }

  debug_update() {
    this.top_x = this.x - this.width / 2;
    return this.top_y = this.y - this.height / 2;
  }

  debug_move(x, y) {
    var target_pos;
    this.x = x;
    this.y = y;
    this.debug_update();
    target_pos = [80, 20];
    return this.offset = [target_pos[0] - this.x, target_pos[1] - this.y];
  }

  //print("Offset: " + str(self.offset))
  move(dx, dy) {
    // straightforward for cartesian coords
    return this.offset = [this.offset[0] + dx, this.offset[1] + dy];
  }

  // camera extents to speed up rendering
  get_width_start() {
    if (this.top_x > 0) {
      return this.top_x;
    } else {
      return 0;
    }
  }

  get_width_end(map_draw) {
    if (this.top_x + this.width <= map_draw.length) { // constants.MAP_WIDTH:
      return this.top_x + this.width;
    } else {
      return map_draw.length; // constants.MAP_WIDTH
    }
  }

  get_height_start() {
    if (this.top_y > 0) {
      return this.top_y;
    } else {
      return 0;
    }
  }

  get_height_end(map_draw) {
    if (this.top_y + this.height <= map_draw[0].length) { // constants.MAP_HEIGHT:
      return this.top_y + this.height;
    } else {
      return map_draw[0].length; // constants.MAP_HEIGHT
    }
  }

};

export {
  Camera
};
