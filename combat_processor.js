// Generated by CoffeeScript 2.5.1
var CombatProcessor, skill_test;

import {
  Combat,
  Stats,
  Attributes,
  Name,
  Dead,
  Player,
  Faction,
  Skills,
  Equipped,
  MeleeBonus,
  Weapon
} from './components.js';

import {
  State
} from './js_game_vars.js';

import {
  get_faction_reaction
} from './game.js';

skill_test = function(skill, ent, world) {
  var gain, player, result, sk, tick;
  sk = world.component_for_entity(ent, Skills)[skill];
  State.messages.push(["Making a test for " + skill + " " + sk, [0, 255, 0]]);
  result = State.rng.roller("1d100");
  player = world.component_for_entity(ent, Player);
  if (result < sk) {
    if (player) {
      // check how much we gain in the skill
      tick = State.rng.roller("1d100");
      // roll OVER the current skill
      if (tick > world.component_for_entity(ent, Skills)[skill]) {
        // +1d4 if we succeeded
        gain = State.rng.roller("1d4");
        //setattr(world.component_for_entity(ent, Skills), skill, getattr(world.component_for_entity(ent, SkillsComponent), skill) + gain)
        world.component_for_entity(ent, Skills)[skill] = world.component_for_entity(ent, Skills)[skill] + gain;
        State.messages.push([
          "You gain " + gain + " skill points!",
          [
            115,
            255,
            115 // libtcod light green
          ]
        ]);
      } else {
        // +1 if we didn't
        world.component_for_entity(ent, Skills)[skill] = world.component_for_entity(ent, Skills)[skill] + 1;
        State.messages.push(["You gain 1 skill point", [115, 255, 115]]);
      }
    }
    return true;
  } else {
    if (player) {
      // if we failed, the check for gain is different
      tick = State.rng.roller("1d100");
      // roll OVER the current skill
      if (tick > sk) {
        // +1 if we succeeded, else nothing
        world.component_for_entity(ent, Skills)[skill] = world.component_for_entity(ent, Skills)[skill] + 1;
        State.messages.push([
          "You learn from your failure and gain 1 skill point",
          [
            115,
            255,
            115 // libtcod light green
          ]
        ]);
      }
    }
    return false;
  }
};

CombatProcessor = class CombatProcessor {
  
    constructor() {
      this.world = undefined
    }
    // constructor ->
    //     @world = undefined
    //     @action = null
    ;

  process() {
    var attack_roll, attack_skill, attacker_attributes, attacker_faction, attacker_id, attacker_name, attacker_stats, bonus, color, combat, comps, damage, ent, equipped, i, is_enemy_faction, item_ent, j, k, len, len1, len2, player_hit, ref, ref1, ref2, roll, str_bonus, target_faction, target_id, target_name, target_stats, weapon;
    ref = this.world.get_component(Combat);
    for (i = 0, len = ref.length; i < len; i++) {
      [ent, combat] = ref[i];
      attacker_id = ent;
      // if dead, you don't get a last swing
      if (this.world.component_for_entity(ent, Dead)) {
        return;
      }
      target_id = combat.target_id;
      attacker_faction = this.world.component_for_entity(attacker_id, Faction).faction;
      target_faction = this.world.component_for_entity(target_id, Faction).faction;
      if (attacker_faction === target_faction) {
        return;
      }
      // are we enemies?
      // same faction, don't attack
      is_enemy_faction = get_faction_reaction(attacker_faction, target_faction) < 0;
      if (is_enemy_faction) {
        console.log("Target faction " + target_faction + " is enemy!");
        // message
        attacker_name = this.world.component_for_entity(attacker_id, Name);
        target_name = this.world.component_for_entity(target_id, Name);
        // roll attack
        attack_roll = State.rng.roller("!d100");
        attack_skill = this.world.component_for_entity(attacker_id, Skills).melee;
        // d100 roll under
        if (skill_test("melee", attacker_id, this.world)) {
          // target hit!
          // assume target can try to dodge
          if (skill_test("dodge", target_id, this.world)) {
            State.messages.push([
              target_name.name + " dodges!",
              [
                0,
                191,
                0 // libtcod dark green
              ]
            ]);
          } else {
            // no dodge
            attacker_stats = this.world.component_for_entity(attacker_id, Stats);
            target_stats = this.world.component_for_entity(target_id, Stats);
            // deal damage!

            // if no weapon, deal 1d6
            roll = "1d6";
            ref1 = this.world.get_components(Equipped, Weapon);
            // use equipped weapon's data
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              [item_ent, comps] = ref1[j];
              [equipped, weapon] = comps;
              console.log(equipped.slot);
              if (equipped.owner === attacker_id && equipped.slot === "MAIN_HAND") {
                console.log("Use weapon dice");
                roll = weapon.damage;
              }
            }
            // deal damage!
            damage = State.rng.roller(roll);
            // Strength bonus
            attacker_attributes = this.world.component_for_entity(attacker_id, Attributes);
            str_bonus = Math.floor((attacker_attributes.strength - 10) / 2);
            damage = damage + str_bonus;
            // prevent negative damage
            damage = Math.max(0, damage);
            ref2 = this.world.get_components(Equipped, MeleeBonus);
            // any bonuses?
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              [item_ent, comps] = ref2[k];
              [equipped, bonus] = comps;
              if (equipped.owner === attacker_id) {
                console.log("Applying melee bonus");
                damage += bonus.bonus;
              }
            }
            target_stats.hp -= damage;
            // dead
            if (target_stats.hp <= 0) {
              this.world.add_component(target_id, new Dead());
            }
            //console.log("Killed target... " + target_id)

            // color
            player_hit = this.world.component_for_entity(target_id, Player);
            color = [255, 255, 255];
            if (player_hit) {
              color = [255, 0, 0];
            } else {
              color = [
                127,
                127,
                127 // libtcod light gray
              ];
            }
            State.messages.push([attacker_name.name + " attacks " + target_name.name + " for " + damage + " (" + str_bonus + " STR) damage!", color]);
          }
        } else {
          // miss
          State.messages.push([
            attacker_name.name + " attacks " + target_name.name + " but misses!",
            [
              115,
              115,
              255 // libtcod light blue
            ]
          ]);
        }
      }
      
      // cleanup
      this.world.remove_component(ent, Combat); // avoid coffeescript's implicit return
    }
  }

};

export {
  CombatProcessor
};
