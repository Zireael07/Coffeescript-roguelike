// Generated by CoffeeScript 2.5.0
var AIProcessor;

import {
  NPC,
  Player,
  TurnComponent,
  Position,
  Combat
} from '../components.js';

import {
  State
} from '../js_game_vars.js';

import {
  findPath
} from "../astar.js";

AIProcessor = class AIProcessor {
  
    constructor() {
      this.world = undefined;
    }
    // constructor ->
    //     @world = undefined
    ;

  process() {
    var brain, comps, ent, i, j, len, len1, player_id, ref, ref1;
    console.log("AI processor...");
    player_id = null;
    ref = this.world.get_components(Player);
    for (i = 0, len = ref.length; i < len; i++) {
      [ent, comps] = ref[i];
      player_id = ent;
    }
    if (!this.world.component_for_entity(player_id, TurnComponent)) {
      ref1 = this.world.get_components(NPC);
      // destructuring assignment
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        [ent, comps] = ref1[j];
        [brain] = comps;
        this.take_turn(ent, player_id);
      }
      // player takes the next turn
      this.world.add_component(player_id, new TurnComponent()); // avoid implicit return
    }
  }

  //@world.remove_processor(AIProcessor)
  take_turn(entity, player) {
    var path, player_pos, position;
    //console.log "AI thinks..."
    position = this.world.component_for_entity(entity, Position);
    player_pos = this.world.component_for_entity(player, Position);
    // FOV is symmetric: if we're in FOV, player is in NPC's sights too
    if (State.fov[position.x][position.y] === 1) {
      //console.log("We can see player")

      // pathfind
      path = findPath(State.map, [position.x, position.y], [player_pos.x, player_pos.y]);
      console.log("Path: " + path);
      // #0 is our current position
      if (path.length > 1) {
        //console.log "Next path: " + path[1]
        //console.log "Player pos: " + [player_pos.x, player_pos.y]
        //console.log ((path[1][0] != player_pos.x) and (path[1][1] != player_pos.y))
        if (!((path[1][0] === player_pos.x) && (path[1][1] === player_pos.y))) {
          // just move (the path only works on walkable tiles anyway)
          return [position.x, position.y] = path[1];
        } else {
          //console.log("AI kicks at your shins")
          // Trigger a bump attack here
          console.log("Attacking " + player + " @ " + player_pos);
          return this.world.add_component(entity, new Combat(player));
        }
      }
    }
  }

};

export {
  AIProcessor
};
