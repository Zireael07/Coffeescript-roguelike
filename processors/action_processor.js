// Generated by CoffeeScript 2.5.0
var ActionProcessor;

import {
  TurnComponent,
  Velocity,
  WantToPickup,
  WantToUseItem,
  WantToDrop,
  Cursor,
  Ranged,
  Position,
  MedItem,
  Wearable
} from '../components.js';

import {
  AIProcessor
} from './ai_processor.js';

ActionProcessor = class ActionProcessor {
  
    constructor() {
      this.world = undefined
      this.action = null
    }
    // constructor ->
    //     @world = undefined
    //     @action = null
    ;

  process() {
    var _drop_item, _look, _move, _pick_up, _target, _use_item, cur, dx, dy, ent, i, len, pos, ref, turn;
    // Assign the appropriate component.
    // For example, for action == {'move': (0, -1)}, set the vel.dx and vel.dy.
    _move = this.action['move'];
    _pick_up = this.action['pick_up'];
    _use_item = this.action['use_item'];
    _drop_item = this.action['drop_item'];
    _target = this.action['target'];
    _look = this.action['look'];
    ref = this.world.get_component(TurnComponent);
    for (i = 0, len = ref.length; i < len; i++) {
      [ent, turn] = ref[i];
      if (_move) {
        [dx, dy] = _move;
        if (!this.world.component_for_entity(ent, Cursor)) {
          this.world.add_component(ent, new Velocity(dx, dy));
        } else {
          cur = this.world.component_for_entity(ent, Cursor);
          cur.x = cur.x + dx;
          cur.y = cur.y + dy;
        }
      }
      if (_pick_up) {
        this.world.add_component(ent, new WantToPickup());
        console.log("Pickup to execute...");
      }
      if (_use_item) {
        console.log("Use to execute... " + _use_item);
        if (this.world.component_for_entity(_use_item, MedItem)) {
          this.world.add_component(ent, new WantToUseItem(_use_item));
        }
        if (this.world.component_for_entity(_use_item, Wearable)) {
          this.world.add_component(ent, new WantToUseItem(_use_item));
        }
        if (this.world.component_for_entity(_use_item, Ranged)) {
          pos = this.world.component_for_entity(ent, Position);
          this.world.add_component(ent, new Cursor(pos.x, pos.y, _use_item));
        }
      }
      if (_drop_item) {
        this.world.add_component(ent, new WantToDrop(_drop_item));
        console.log("Drop to execute... " + _drop_item);
      }
      if (_target) {
        console.log("Target to execute...");
        if (!this.world.component_for_entity(ent, Cursor)) {

        } else {
          // clicked by mistake, ignore
          cur = this.world.component_for_entity(ent, Cursor);
          console.log("Confirmed target x: " + cur.x + " y: " + cur.y);
          if (cur.item !== null) {
            this.world.add_component(ent, new WantToUseItem(cur.item));
          }
        }
      }
      if (_look) {
        console.log("Look to execute...");
        if (!this.world.component_for_entity(ent, Cursor)) {
          pos = this.world.component_for_entity(ent, Position);
          this.world.add_component(ent, new Cursor(pos.x, pos.y, null));
        } else {
          // toggle it off
          this.world.remove_component(ent, Cursor);
        }
      }
      if (!this.world.component_for_entity(ent, Cursor)) {
        // no longer our turn, AI now acts
        this.world.remove_component(ent, TurnComponent); // avoid coffeescript's implicit return
      }
      return;
    }
  }

};

export {
  //@world.add_and_run_processor(new AIProcessor())
  //console.log @world.processors
  ActionProcessor
};
