// Generated by CoffeeScript 2.5.0
var map_create, paint, room_func;

import {
  TileTypes
} from './enums.js';

import {
  Rect
} from './map_common.js';

import {
  split_container
} from './bsp.js';

paint = function(tree, mapa) {
  room_func(tree.leaf, mapa);
  if (tree.lchild !== void 0) {
    room_func(tree.lchild.leaf, mapa);
  }
  if (tree.rchild !== void 0) {
    room_func(tree.rchild.leaf, mapa); // throttle default ret
  }
};

room_func = function(room, mapa) {
  var i, j, k, l, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, x, x_max2, x_min, x_min2, y, y_max2, y_min, y_min2;
  console.log(room);
  //console.log(mapa)
  // set all tiles within a rectangle to wall
  x_min = room.x1 + 1;
  y_min = room.y1 + 1;
  for (x = i = ref = x_min, ref1 = room.x2; (ref <= ref1 ? i <= ref1 : i >= ref1); x = ref <= ref1 ? ++i : --i) {
    for (y = j = ref2 = y_min, ref3 = room.y2; (ref2 <= ref3 ? j <= ref3 : j >= ref3); y = ref2 <= ref3 ? ++j : --j) {
      mapa[x][y] = TileTypes.WALL;
    }
  }
  // Build Interior
  x_min2 = room.x1 + 2;
  x_max2 = room.x2 - 1;
  y_min2 = room.y1 + 2;
  y_max2 = room.y2 - 1;
  for (x = k = ref4 = x_min2, ref5 = x_max2; (ref4 <= ref5 ? k <= ref5 : k >= ref5); x = ref4 <= ref5 ? ++k : --k) {
    for (y = l = ref6 = y_min2, ref7 = y_max2; (ref6 <= ref7 ? l <= ref7 : l >= ref7); y = ref6 <= ref7 ? ++l : --l) {
      mapa[x][y] = TileTypes.FLOOR; // throttle default ret
    }
  }
};

map_create = function(max_x = 20, max_y = 20) {
  var container_tree, end_x, end_y, i, j, main_container, new_map, ref, ref1, x, y;
  //new_map = [[ get_index(TileTypes.FLOOR) for _ in range(0, constants.MAP_HEIGHT)] for _ in range(0, constants.MAP_WIDTH)]
  end_x = max_x - 1;
  end_y = max_y - 1;
  new_map = [];
// those are inclusive
  for (x = i = 0, ref = end_x; (0 <= ref ? i <= ref : i >= ref); x = 0 <= ref ? ++i : --i) {
    new_map.push([]);
    for (y = j = 0, ref1 = end_y; (0 <= ref1 ? j <= ref1 : j >= ref1); y = 0 <= ref1 ? ++j : --j) {
      new_map[x].push([TileTypes.FLOOR]);
    }
  }
  // basic bsp
  main_container = new Rect(0, 0, end_x, end_y); // off by one
  container_tree = split_container(main_container, 2, true);
  paint(container_tree, new_map);
  return new_map;
};

export {
  map_create
};
